%Contains various test cases for prettypie.m
% Initialize the test data
%
AddLib('Plot_Tools');
category_names = {'LightAlkanes','LargeAlkanes','Alkenes','Biogenics','Aromatics','Oxygenates'};
components = { {'H2','CH4','Ethane', 'Propane','iButane','nButane','iPentane','nPentane'},...
               {'nHexane','nHeptane','nOctane','nNonane','nDecane','X23MethylButane','X2MethylPentane',...
                     'X3MethylPentane','CycloPentane','MethylCycloPentane','CycloHexane','MethylCycloHexane'},...
               {'Ethene', 'Ethyne', 'Propene', 'X1Butene','iButene','c2Butene','t2Butene','X13Butadiene'},...
               {'Isoprene','MVKMACR','APINENE','BPINENE','IEPOX'},...
               {'Benzene','Toluene','Cresol','EthylBenz','mpXyl','oXyl', 'Styrene','iPropylBenzene',...
                    'nPropylBenzene','X3EthylToluene','X4EthylToluene','X2EthylToluene','X135TMB','X124TMB' 'X123TMB'},...
               { 'CO','HCHO','CH3OH','Acetonitrile', 'Acetone' ,'ANs',  'H2O2','HAC', 'MHP','HCN',...
'Acetaldehyde', 'MEK','HyperAcet','GLYC','CH3CO3H'}
               };
           
           
struct_inputdata = struct(...
'CO', 3.1218e-04,...
'CH4', 1.1618e-04,...
'HCHO', 0.1563,...
'CH3OH', 0.0587,...
'Acetonitrile', 4.3706e-05,...
'Acetone', 0.0061,...
'Ethane', 0.0046,...
'Ethene', 0.0249,...
'Ethyne', 8.4328e-04,...
'Propane', 0.0115,...
'Propene', 0.0115,...
'iButane', 0.0059,...
'nButane', 0.0096,...
'iPentane', 0.0103,...
'nPentane', 0.0075,...
'Isoprene', 0.0717,...
'nHexane', 0.0074,...
'nHeptane', 0.0017,...
'Benzene', 0.0017,...
'Toluene', 0.0463,...
'O3', 0,...
'HO2', 0,...
'NO2', 0,...
'HCl', 0,...
'SO2', 0,...
'CHOCHO', NaN,...
'ANs', 0.0199,...
'PNs', 0,...
'H2O2', 0.0080,...
'Cresol', 0.0013,...
'DHT', 0,...
'HAC', 0.0042,...
'MHP', 0.0265,...
'HCN', 0.0019,...
'ISOPOOH', 0,...
'Acetaldehyde', 0.0953,...
'MVKMACR', 0.0653,...
'MEK', 0.0115,...
'DMS', NaN,...
'Cl2', 0,...
'ClNO2', 0,...
'HyperAcet', 0.0018,...
'GLYC', 0.0084,...
'CH3CO3H', 0.0065,...
'HNO3', 0,...
'IEPOX', 0.0152,...
'X1Butene', 0.0049,...
'iButene', 0.0143,...
'c2Butene', 0.0044,...
't2Butene', 0.0050,...
'X13Butadiene', 0.0225,...
'nOctane', 0.0014,...
'nNonane', 0.0013,...
'nDecane', 0.0013,...
'X23MethylButane', 7.1601e-04,...
'X2MethylPentane', 0.0018,...
'X3MethylPentane', 0.0019,...
'CycloPentane', 8.0715e-04,...
'MethylCycloPentane', 0.0040,...
'CycloHexane', 0.0029,...
'MethylCycloHexane', 0.0016,...
'EthylBenz', 0.0071,...
'mpXyl', 0.0140,...
'oXyl', 0.0053,...
'Styrene', 0.0069,...
'iPropylBenzene', 5.4144e-04,...
'nPropylBenzene', 3.5001e-04,...
'X3EthylToluene', 0.0013,...
'X4EthylToluene', 7.5292e-04,...
'X2EthylToluene', 6.0126e-04,...
'X135TMB', 0.0021,...
'X124TMB', 0.0028,...
'X123TMB', 0.0015,...
'APINENE', 0.0032,...
'BPINENE', 0.0031,...
'H2', 0.0159); 

struct_celldictionary = components;
struct_labels = category_names;
struct_structdictionary = struct();
for ind = 1:numel(category_names)
    struct_structdictionary.(category_names{ind}) = components{ind};
end

cell_inputdata = {};
for categoryInd = 1:numel(category_names)
    curr_cat_name = category_names{categoryInd};
    curr_cat = components{categoryInd};
    
    curr_averages = [];
    for sInd = 1:numel(curr_cat)
        curr_species_name = curr_cat{sInd};
        curr_species = struct_inputdata.(curr_species_name);
        curr_averages(sInd) =  curr_species;
    end
%     [c i] = sort(curr_averages);
%     all_orders{categoryInd} = i;
    cell_inputdata{categoryInd} = curr_averages; %curr_averages(i);
end

cell_celllabels = components;
cell_structlabels = components;

array_inputdata = [];
array_categorical = {};
n = 1;
for categoryInd = 1:numel(category_names)
    curr_cat_name = category_names{categoryInd};
    curr_cat = components{categoryInd};
     for sInd = 1:numel(curr_cat)
        curr_species_name = curr_cat{sInd};
        array_inputdata(n) = struct_inputdata.(curr_species_name);
        array_categorical{n} = curr_cat_name;
        array_slicenames{n} = curr_species_name;
        n = n + 1;
     end
end
array_categorical = categorical(array_categorical,category_names);


struct_bycategory = struct();
for ind = 1:numel(cell_inputdata)
    curr_fn = category_names{ind};
    struct_bycategory.(curr_fn) = cell_inputdata{ind};
end

bad_components = components;
bad_components{2} = {'Hello World'};


%% cell version input, expect to succeed
figure(1); clf;
prettypie(cell_inputdata,'labelcutoff',0.01,'plotcutoff',0.0,'sorted',1,'labelfontsize',14,...
    'labelmode','slice','slicelabels',components,'categorylabels',category_names);
title('Using Cell Input');


%% array version input, expect to succeed
figure(2); clf; 
prettypie(array_inputdata,array_categorical,'plotcutoff',0,'labelmode','category','labelcutoff',0.00,'slicelabels',array_slicenames)
title('Using Array Input');

 

%% stuct version input, expect to succeed
figure(3); clf;
prettypie(struct_bycategory);
title('Using StructCat Input');

%% struct version, requesting labelmode category, expect to pass
figure(4); clf; 
prettypie(struct_bycategory,'labelmode','category')

%% cell version, many options, expect all to pass
figure(5); clf; 
prettypie(cell_inputdata,'labelcutoff',0.01,'sorted',false);

figure(5); clf; 
prettypie(cell_inputdata,'labelcutoff',1,'sorted',false);

figure(5); clf;
prettypie(cell_inputdata,'labelcutoff',0,'labelmode','category','categorylabels',category_names);


figure(5); clf;
prettypie(cell_inputdata,'labelcutoff',0,'labelmode','category','categorylabels',category_names,'sorted',0);

figure(5); clf;
prettypie(cell_inputdata,'labelcutoff',0,'labelmode','category','categorylabels',category_names,'sorted',0,...
    'labelfontsize',100);

%%
figure(6); clf;
prettypie(cell_inputdata,'labelcutoff',0.01,'labelmode','category','categorylabels',category_names,'sorted',1,...
    'labelfontsize',12,'plotcutoff',0.05,'slicelabels',cell_celllabels);

%%
figure(7); clf;
test_struct = struct('LightAlkanes',struct_bycategory.Oxygenates);
prettypie(test_struct,'labelmode','category')

%% cell version, bad input to sorted, expect to fail
figure(10); clf
prettypie(cell_inputdata,'labelcutoff',0,'labelmode','category','categorylabels',category_names,'sorted','HelloWorld');


%% cell version, bad input to sorted2, expect to fail
figure(10); clf
prettypie(cell_inputdata,'labelcutoff',0,'labelmode','category','categorylabels',category_names,'sorted',{18,22});

%% cell version, called with labelmode category, expect to fail
figure(10); clf; 
prettypie(cell_inputdata,'labelcutoff',0.01,'sorted',true, 'labelmode','category');


%% cell version, plotcutoff too high, expect to fail
figure(10); clf; 
prettypie(cell_inputdata,'plotcutoff',1);
%% cell version input, expect to fail
figure(10); clf
prettypie(cell_inputdata,'labelcutoff',0.00,'plotcutoff',0.0,'sorted',1,'labelfontsize',14,...
    'labelmode','slice','slicelabels',bad_components,'categorylabels',category_names);


%% struct version input with extra category, expect to fail
figure(10); clf; 
bad_cat = struct_bycategory;
bad_cat.Extra = [0.01,0.03,0.015];
prettypie(bad_cat);

%% struct version with cell dictionary, expect to fail
figure(10); clf; 
prettypie(struct_bycategory,struct_celldictionary)

%% array version, but no categories given, expect to fail
figure(10); clf; 
prettypie(array_inputdata);

%% struct version, requesting labelmode slice but no slices given, expect to fail
figure(10); clf; 
prettypie(struct_bycategory,'labelmode','slice')

%% cell version, requesting labelmode slice but no slices given, expect to fail
figure(10); clf; 
prettypie(cell_inputdata,'labelmode','slice')

%% array version, requesting labelmode slice but no slices given, expect to fail
figure(10); clf; 
prettypie(array_inputdata, array_categorical,'labelmode','slice')

